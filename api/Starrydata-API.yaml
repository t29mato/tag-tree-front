openapi: 3.1.0
info:
  title: Starrydata API
  version: '3.0'
  description: '  '
servers:
  - url: 'http://localhost:3100'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /papers:
    get:
      summary: Get Papers
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                x-examples:
                  example-1:
                    - type: articles
                      id: '1'
                      attributes:
                        title: Rails is Omakase
                      relationships:
                        author:
                          links:
                            self: /articles/1/relationships/author
                            related: /articles/1/author
                          data:
                            type: people
                            id: '9'
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      minLength: 1
                      default: paper
                    id:
                      type: string
                      minLength: 1
                    attributes:
                      $ref: '#/components/schemas/Paper'
              examples:
                example-1:
                  value:
                    - SID: 1
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
                    - SID: 2
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
                    - SID: 3
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
                    - SID: 4
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
                    - SID: 5
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
                    - SID: 6
                      title: Decoupling Interrelated Parameters for Designing High Performance Thermoelectric Materials
                      authors: 'C. Xiao, Z. Li, K. Li, P. Huang, Y. Xie,'
                      identifier: 00000001_Xiao_2014
                      DOI: 10.1021/ar400290f
                      figures: 1
                      samples: 1
        '201':
          description: Created
      operationId: get-papers
      x-internal: false
    parameters: []
  '/papers/{paperId}':
    parameters:
      - schema:
          type: string
        name: paperId
        in: path
        required: true
    get:
      summary: get paper
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    type: articles
                    id: '1'
                    attributes:
                      title: Rails is Omakase
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                      id:
                        type: string
                      attributes:
                        $ref: '#/components/schemas/Paper'
      operationId: get-papers-paperId
  /projects:
    get:
      summary: get databases
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                x-examples:
                  example-1:
                    - type: articles
                      id: '1'
                      attributes:
                        title: Rails is Omakase
                      relationships:
                        author:
                          links:
                            self: /articles/1/relationships/author
                            related: /articles/1/author
                          data:
                            type: people
                            id: '9'
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      minLength: 1
                    id:
                      type: string
                      minLength: 1
                    attributes:
                      $ref: '#/components/schemas/Project'
                  required:
                    - type
                    - id
                    - attributes
      operationId: get-databases
    parameters: []
components:
  schemas:
    Paper:
      title: Paper
      type: object
      description: ''
      properties:
        id:
          type: string
        DOI:
          type: string
        title:
          type: string
    Project:
      title: Project
      type: object
      properties:
        id:
          type: string
        name:
          type: string
