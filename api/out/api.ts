/* tslint:disable */
/* eslint-disable */
/**
 * Starrydata API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Contributor
 */
export interface Contributor {
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    family: string;
    /**
     * 
     * @type {string}
     * @memberof Contributor
     */
    given?: string;
}
/**
 * 
 * @export
 * @interface Database
 */
export interface Database {
    /**
     * 
     * @type {string}
     * @memberof Database
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof Database
     */
    id?: number;
    /**
     * 
     * @type {DatabaseAttributes}
     * @memberof Database
     */
    attributes?: DatabaseAttributes;
    /**
     * 
     * @type {DatabaseRelationships}
     * @memberof Database
     */
    relationships?: DatabaseRelationships;
}
/**
 * 
 * @export
 * @interface DatabaseAttributes
 */
export interface DatabaseAttributes {
    /**
     * 
     * @type {string}
     * @memberof DatabaseAttributes
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface DatabaseRelationships
 */
export interface DatabaseRelationships {
    /**
     * 
     * @type {DatabaseRelationshipsPapers}
     * @memberof DatabaseRelationships
     */
    papers?: DatabaseRelationshipsPapers;
    /**
     * 
     * @type {DatabaseRelationshipsFigures}
     * @memberof DatabaseRelationships
     */
    figures?: DatabaseRelationshipsFigures;
    /**
     * 
     * @type {DatabaseRelationshipsSamples}
     * @memberof DatabaseRelationships
     */
    samples?: DatabaseRelationshipsSamples;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsFigures
 */
export interface DatabaseRelationshipsFigures {
    /**
     * 
     * @type {Array<Figure>}
     * @memberof DatabaseRelationshipsFigures
     */
    data?: Array<Figure>;
    /**
     * 
     * @type {DatabaseRelationshipsFiguresMeta}
     * @memberof DatabaseRelationshipsFigures
     */
    meta?: DatabaseRelationshipsFiguresMeta;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsFiguresMeta
 */
export interface DatabaseRelationshipsFiguresMeta {
    /**
     * 
     * @type {number}
     * @memberof DatabaseRelationshipsFiguresMeta
     */
    totalFigures?: number;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsPapers
 */
export interface DatabaseRelationshipsPapers {
    /**
     * 
     * @type {Array<Paper>}
     * @memberof DatabaseRelationshipsPapers
     */
    data?: Array<Paper>;
    /**
     * 
     * @type {DatabaseRelationshipsPapersMeta}
     * @memberof DatabaseRelationshipsPapers
     */
    meta?: DatabaseRelationshipsPapersMeta;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsPapersMeta
 */
export interface DatabaseRelationshipsPapersMeta {
    /**
     * 
     * @type {number}
     * @memberof DatabaseRelationshipsPapersMeta
     */
    totalPapers?: number;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsSamples
 */
export interface DatabaseRelationshipsSamples {
    /**
     * 
     * @type {Array<Sample>}
     * @memberof DatabaseRelationshipsSamples
     */
    data?: Array<Sample>;
    /**
     * 
     * @type {DatabaseRelationshipsSamplesMeta}
     * @memberof DatabaseRelationshipsSamples
     */
    meta?: DatabaseRelationshipsSamplesMeta;
}
/**
 * 
 * @export
 * @interface DatabaseRelationshipsSamplesMeta
 */
export interface DatabaseRelationshipsSamplesMeta {
    /**
     * 
     * @type {number}
     * @memberof DatabaseRelationshipsSamplesMeta
     */
    totalSamples?: number;
}
/**
 * 
 * @export
 * @interface Figure
 */
export interface Figure {
    /**
     * 
     * @type {string}
     * @memberof Figure
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Figure
     */
    id?: string;
    /**
     * 
     * @type {object}
     * @memberof Figure
     */
    attributes?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Paper>}
     * @memberof InlineResponse200
     */
    data?: Array<Paper>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {InlineResponse2001Data}
     * @memberof InlineResponse2001
     */
    data?: InlineResponse2001Data;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Data
 */
export interface InlineResponse2001Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    id?: string;
    /**
     * 
     * @type {Paper}
     * @memberof InlineResponse2001Data
     */
    attributes?: Paper;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Database>}
     * @memberof InlineResponse2002
     */
    data?: Array<Database>;
}
/**
 * 
 * @export
 * @interface Paper
 */
export interface Paper {
    /**
     * 
     * @type {string}
     * @memberof Paper
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof Paper
     */
    id: number;
    /**
     * 
     * @type {PaperAttributes}
     * @memberof Paper
     */
    attributes: PaperAttributes;
    /**
     * 
     * @type {PaperRelationships}
     * @memberof Paper
     */
    relationships?: PaperRelationships;
}
/**
 * 
 * @export
 * @interface PaperAttributes
 */
export interface PaperAttributes {
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    DOI: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    publisher: string;
    /**
     * 
     * @type {Array<Contributor>}
     * @memberof PaperAttributes
     */
    authors?: Array<Contributor>;
    /**
     * 
     * @type {string}
     * @memberof PaperAttributes
     */
    container_title?: string;
}
/**
 * 
 * @export
 * @interface PaperRelationships
 */
export interface PaperRelationships {
    /**
     * 
     * @type {PaperRelationshipsFigures}
     * @memberof PaperRelationships
     */
    figures?: PaperRelationshipsFigures;
    /**
     * 
     * @type {PaperRelationshipsFigures}
     * @memberof PaperRelationships
     */
    samples?: PaperRelationshipsFigures;
}
/**
 * 
 * @export
 * @interface PaperRelationshipsFigures
 */
export interface PaperRelationshipsFigures {
    /**
     * 
     * @type {PaperRelationshipsFiguresMeta}
     * @memberof PaperRelationshipsFigures
     */
    meta?: PaperRelationshipsFiguresMeta;
}
/**
 * 
 * @export
 * @interface PaperRelationshipsFiguresMeta
 */
export interface PaperRelationshipsFiguresMeta {
    /**
     * 
     * @type {number}
     * @memberof PaperRelationshipsFiguresMeta
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Sample
 */
export interface Sample {
    /**
     * 
     * @type {string}
     * @memberof Sample
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Sample
     */
    id?: string;
    /**
     * 
     * @type {object}
     * @memberof Sample
     */
    attributes?: object;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 論文一覧取得
         * @summary get databases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabases: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/databases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Papers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPapers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/papers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get paper
         * @param {string} paperId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPapersPaperId: async (paperId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paperId' is not null or undefined
            assertParamExists('getPapersPaperId', 'paperId', paperId)
            const localVarPath = `/papers/{paperId}`
                .replace(`{${"paperId"}}`, encodeURIComponent(String(paperId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 論文一覧取得
         * @summary get databases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatabases(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDatabases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Papers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPapers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPapers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get paper
         * @param {string} paperId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPapersPaperId(paperId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPapersPaperId(paperId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 論文一覧取得
         * @summary get databases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatabases(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getDatabases(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Papers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPapers(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getPapers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get paper
         * @param {string} paperId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPapersPaperId(paperId: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getPapersPaperId(paperId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 論文一覧取得
     * @summary get databases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDatabases(options?: any) {
        return DefaultApiFp(this.configuration).getDatabases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Papers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPapers(options?: any) {
        return DefaultApiFp(this.configuration).getPapers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get paper
     * @param {string} paperId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPapersPaperId(paperId: string, options?: any) {
        return DefaultApiFp(this.configuration).getPapersPaperId(paperId, options).then((request) => request(this.axios, this.basePath));
    }
}


