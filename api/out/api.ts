/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * @type Data
 * The document\'s `primary data` is a representation of the resource or collection of resources targeted by a request.
 * @export
 */
export type Data = Resource | Set<Resource> | number;

/**
 * singular item
 * @export
 * @interface Datum
 */
export interface Datum {
    /**
     * 
     * @type {Resource}
     * @memberof Datum
     */
    data?: Resource;
}
/**
 * 
 * @export
 * @interface ErrorSource
 */
export interface ErrorSource {
    /**
     * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute].
     * @type {string}
     * @memberof ErrorSource
     */
    pointer?: string;
    /**
     * A string indicating which query parameter caused the error.
     * @type {string}
     * @memberof ErrorSource
     */
    parameter?: string;
}
/**
 * 
 * @export
 * @interface FabricationProcess
 */
export interface FabricationProcess {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof FabricationProcess
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof FabricationProcess
     */
    id: string;
    /**
     * 
     * @type {FabricationProcessLinks}
     * @memberof FabricationProcess
     */
    links?: FabricationProcessLinks;
    /**
     * 
     * @type {FabricationProcessAttributes}
     * @memberof FabricationProcess
     */
    attributes?: FabricationProcessAttributes;
    /**
     * 
     * @type {FabricationProcessRelationships}
     * @memberof FabricationProcess
     */
    relationships?: FabricationProcessRelationships;
}
/**
 * 
 * @export
 * @interface FabricationProcessAttributes
 */
export interface FabricationProcessAttributes {
    /**
     * 
     * @type {number}
     * @memberof FabricationProcessAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof FabricationProcessAttributes
     */
    name_ja: string;
}
/**
 * 
 * @export
 * @interface FabricationProcessLinks
 */
export interface FabricationProcessLinks {
    /**
     * 
     * @type {Link}
     * @memberof FabricationProcessLinks
     */
    self?: Link;
}
/**
 * 
 * @export
 * @interface FabricationProcessRelationships
 */
export interface FabricationProcessRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof FabricationProcessRelationships
     */
    parent_id?: Reltoone;
}
/**
 * 
 * @export
 * @interface Failure
 */
export interface Failure {
    /**
     * 
     * @type {Set<ModelError>}
     * @memberof Failure
     */
    errors: Set<ModelError>;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Failure
     */
    meta?: { [key: string]: object; };
    /**
     * 
     * @type {Jsonapi}
     * @memberof Failure
     */
    jsonapi?: Jsonapi;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Failure
     */
    links?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Info
     */
    meta: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Info
     */
    links?: { [key: string]: Link; };
    /**
     * 
     * @type {Jsonapi}
     * @memberof Info
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<FabricationProcess>}
     * @memberof InlineResponse200
     */
    data: Array<FabricationProcess>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse200
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse200
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse200
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<SynthesisMethodTag>}
     * @memberof InlineResponse2001
     */
    data: Array<SynthesisMethodTag>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2001
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2001
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse2001
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<SynthesisMethodTagTreeNode>}
     * @memberof InlineResponse2002
     */
    data: Array<SynthesisMethodTagTreeNode>;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2002
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2002
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse2002
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {FabricationProcess}
     * @memberof InlineResponse201
     */
    data: FabricationProcess;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse201
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse201
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse201
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {SynthesisMethodTag}
     * @memberof InlineResponse2011
     */
    data: SynthesisMethodTag;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2011
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2011
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse2011
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface InlineResponse2012
 */
export interface InlineResponse2012 {
    /**
     * 
     * @type {SynthesisMethodTagTreeNode}
     * @memberof InlineResponse2012
     */
    data: SynthesisMethodTagTreeNode;
    /**
     * 
     * @type {Set<Resource>}
     * @memberof InlineResponse2012
     */
    included?: Set<Resource>;
    /**
     * Link members related to primary data
     * @type {any & Pagination}
     * @memberof InlineResponse2012
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof InlineResponse2012
     */
    jsonapi?: Jsonapi;
}
/**
 * @type JSONAPIresponse
 * @export
 */
export type JSONAPIresponse = Failure | Info | Success;

/**
 * An object describing the server\'s implementation
 * @export
 * @interface Jsonapi
 */
export interface Jsonapi {
    /**
     * 
     * @type {string}
     * @memberof Jsonapi
     */
    version?: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Jsonapi
     */
    meta?: { [key: string]: object; };
}
/**
 * @type Link
 * A link **MUST** be represented as either: a string containing the link\'s URL or a link object.
 * @export
 */
export type Link = LinkOneOf | string;

/**
 * 
 * @export
 * @interface LinkOneOf
 */
export interface LinkOneOf {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof LinkOneOf
     */
    href: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof LinkOneOf
     */
    meta?: { [key: string]: object; };
}
/**
 * The `type` and `id` to non-empty members.
 * @export
 * @interface Linkage
 */
export interface Linkage {
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Linkage
     */
    id: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Linkage
     */
    meta?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A unique identifier for this particular occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof ModelError
     */
    links?: { [key: string]: Link; };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    status?: string;
    /**
     * An application-specific error code, expressed as a string value.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
     * @type {string}
     * @memberof ModelError
     */
    title?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    detail?: string;
    /**
     * 
     * @type {ErrorSource}
     * @memberof ModelError
     */
    source?: ErrorSource;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof ModelError
     */
    meta?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Onlymeta
 */
export interface Onlymeta {
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Onlymeta
     */
    meta?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * The first page of data
     * @type {string | number}
     * @memberof Pagination
     */
    first?: string | number;
    /**
     * The last page of data
     * @type {string | number}
     * @memberof Pagination
     */
    last?: string | number;
    /**
     * The previous page of data
     * @type {string | number}
     * @memberof Pagination
     */
    prev?: string | number;
    /**
     * The next page of data
     * @type {string | number}
     * @memberof Pagination
     */
    next?: string | number;
}
/**
 * singular item being [created](https://jsonapi.org/format/#crud-creating). `id` is optional and may be ignored if supplied and created by the system.
 * @export
 * @interface PostDatum
 */
export interface PostDatum {
    /**
     * 
     * @type {PostResource}
     * @memberof PostDatum
     */
    data?: PostResource;
}
/**
 * A POSTable resource object has an optional id.
 * @export
 * @interface PostResource
 */
export interface PostResource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof PostResource
     */
    id?: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof PostResource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof PostResource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PostResource
     */
    links?: { [key: string]: Link; };
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof PostResource
     */
    meta?: { [key: string]: object; };
}
/**
 * A single relationship description
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Relationship
     */
    links?: RelationshipLinks;
    /**
     * Member, whose value represents `resource linkage`.
     * @type {RelationshipToOne | Set}
     * @memberof Relationship
     */
    data?: RelationshipToOne | Set;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Relationship
     */
    meta?: { [key: string]: object; };
}
/**
 * A resource object **MAY** contain references to other resource objects (`relationships`). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipLinks
 */
export interface RelationshipLinks {
    [key: string]: object | any;

    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    self?: Link;
    /**
     * 
     * @type {Link}
     * @memberof RelationshipLinks
     */
    related?: Link;
}
/**
 * References to other resource objects in a to-one (`relationship`). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipToOne
 */
export interface RelationshipToOne {
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RelationshipToOne
     */
    id: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof RelationshipToOne
     */
    meta?: { [key: string]: object; };
}
/**
 * A multiple relationship
 * @export
 * @interface Reltomany
 */
export interface Reltomany {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltomany
     */
    links?: RelationshipLinks;
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomany
     */
    data?: Set<Linkage>;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Reltomany
     */
    meta?: { [key: string]: object; };
}
/**
 * A multiple relationship, data only.
 * @export
 * @interface Reltomanydata
 */
export interface Reltomanydata {
    /**
     * An array of objects each containing `type` and `id` members for to-many relationships.
     * @type {Set<Linkage>}
     * @memberof Reltomanydata
     */
    data?: Set<Linkage>;
}
/**
 * A singular relationship
 * @export
 * @interface Reltoone
 */
export interface Reltoone {
    /**
     * 
     * @type {RelationshipLinks}
     * @memberof Reltoone
     */
    links?: RelationshipLinks;
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoone
     */
    data?: RelationshipToOne;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Reltoone
     */
    meta?: { [key: string]: object; };
}
/**
 * A singular relationship, data only.
 * @export
 * @interface Reltoonedata
 */
export interface Reltoonedata {
    /**
     * 
     * @type {RelationshipToOne}
     * @memberof Reltoonedata
     */
    data?: RelationshipToOne;
}
/**
 * Resource objects appear in a JSON API document to represent resources.
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof Resource
     */
    id: string;
    /**
     * Members of the attributes object (`attributes`) represent information about the resource object in which it\'s defined.
     * @type {object}
     * @memberof Resource
     */
    attributes?: object;
    /**
     * Members of the relationships object represent references from the resource object in which it\'s defined to other resource objects. N.B. this is validation, not useful for inclusion.
     * @type {{ [key: string]: Relationship; }}
     * @memberof Resource
     */
    relationships?: { [key: string]: Relationship; };
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof Resource
     */
    links?: { [key: string]: Link; };
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Resource
     */
    meta?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * 
     * @type {Data}
     * @memberof Success
     */
    data: Data;
    /**
     * To reduce the number of HTTP requests, servers **MAY** allow responses that include related resources along with the requested primary resources. Such responses are called `compound documents`.
     * @type {Set<Resource>}
     * @memberof Success
     */
    included?: Set<Resource>;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Success
     */
    meta?: { [key: string]: object; };
    /**
     * Link members related to the primary data.
     * @type {any & Pagination}
     * @memberof Success
     */
    links?: any & Pagination;
    /**
     * 
     * @type {Jsonapi}
     * @memberof Success
     */
    jsonapi?: Jsonapi;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTag
 */
export interface SynthesisMethodTag {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTag
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTag
     */
    id: string;
    /**
     * 
     * @type {FabricationProcessLinks}
     * @memberof SynthesisMethodTag
     */
    links?: FabricationProcessLinks;
    /**
     * 
     * @type {SynthesisMethodTagAttributes}
     * @memberof SynthesisMethodTag
     */
    attributes?: SynthesisMethodTagAttributes;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTagAttributes
 */
export interface SynthesisMethodTagAttributes {
    /**
     * 
     * @type {number}
     * @memberof SynthesisMethodTagAttributes
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SynthesisMethodTagAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTagTreeNode
 */
export interface SynthesisMethodTagTreeNode {
    /**
     * [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTagTreeNode
     */
    type: string;
    /**
     * [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
     * @type {string}
     * @memberof SynthesisMethodTagTreeNode
     */
    id: string;
    /**
     * 
     * @type {FabricationProcessLinks}
     * @memberof SynthesisMethodTagTreeNode
     */
    links?: FabricationProcessLinks;
    /**
     * 
     * @type {SynthesisMethodTagAttributes}
     * @memberof SynthesisMethodTagTreeNode
     */
    attributes?: SynthesisMethodTagAttributes;
    /**
     * 
     * @type {SynthesisMethodTagTreeNodeRelationships}
     * @memberof SynthesisMethodTagTreeNode
     */
    relationships?: SynthesisMethodTagTreeNodeRelationships;
}
/**
 * 
 * @export
 * @interface SynthesisMethodTagTreeNodeRelationships
 */
export interface SynthesisMethodTagTreeNodeRelationships {
    /**
     * 
     * @type {Reltoone}
     * @memberof SynthesisMethodTagTreeNodeRelationships
     */
    synthesis_method_tag?: Reltoone;
    /**
     * 
     * @type {Reltoone}
     * @memberof SynthesisMethodTagTreeNodeRelationships
     */
    parent?: Reltoone;
}

/**
 * StarrydataApi - axios parameter creator
 * @export
 */
export const StarrydataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFabricationProcesses: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fabrication_processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTagTreeNodes: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTags: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiFabricationProcessesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagTreeNodesId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagsId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('destroyApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFabricationProcesses: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/fabrication_processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTagTreeNodes: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTags: async (include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/synthesis_method_tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiFabricationProcessesId: async (id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagTreeNodesId: async (id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagsId: async (id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiFabricationProcessesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiFabricationProcessesId', 'id', id)
            const localVarPath = `/api/fabrication_processes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagTreeNodesId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiSynthesisMethodTagTreeNodesId', 'id', id)
            const localVarPath = `/api/synthesis_method_tag_tree_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagsId: async (id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveApiSynthesisMethodTagsId', 'id', id)
            const localVarPath = `/api/synthesis_method_tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterSearch !== undefined) {
                localVarQueryParameter['filter[search]'] = filterSearch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StarrydataApi - functional programming interface
 * @export
 */
export const StarrydataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StarrydataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiFabricationProcesses(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiFabricationProcesses(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiSynthesisMethodTags(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiSynthesisMethodTags(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiFabricationProcessesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiFabricationProcessesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiSynthesisMethodTagTreeNodesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyApiSynthesisMethodTagsId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Onlymeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyApiSynthesisMethodTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiFabricationProcessesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiFabricationProcessesId(id, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiSynthesisMethodTagTreeNodesId(id, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateApiSynthesisMethodTagsId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateApiSynthesisMethodTagsId(id, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StarrydataApi - factory interface
 * @export
 */
export const StarrydataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StarrydataApiFp(configuration)
    return {
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiFabricationProcesses(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.createApiFabricationProcesses(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse2012> {
            return localVarFp.createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiSynthesisMethodTags(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.createApiSynthesisMethodTags(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiFabricationProcessesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiFabricationProcessesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiSynthesisMethodTagTreeNodesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyApiSynthesisMethodTagsId(id: string, options?: any): AxiosPromise<Onlymeta> {
            return localVarFp.destroyApiSynthesisMethodTagsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {number} [pageNumber] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiFabricationProcessesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.partialUpdateApiFabricationProcessesId(id, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse2012> {
            return localVarFp.partialUpdateApiSynthesisMethodTagTreeNodesId(id, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateApiSynthesisMethodTagsId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.partialUpdateApiSynthesisMethodTagsId(id, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this fabrication process.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag tree node.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2012> {
            return localVarFp.retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A unique integer value identifying this synthesis method tag.
         * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
         * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
         * @param {string} [sort] Which field to use when ordering the results.
         * @param {string} [filterSearch] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StarrydataApi - object-oriented interface
 * @export
 * @class StarrydataApi
 * @extends {BaseAPI}
 */
export class StarrydataApi extends BaseAPI {
    /**
     * 
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiFabricationProcesses(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).createApiFabricationProcesses(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).createApiSynthesisMethodTagTreeNodes(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public createApiSynthesisMethodTags(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).createApiSynthesisMethodTags(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiFabricationProcessesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiFabricationProcessesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiSynthesisMethodTagTreeNodesId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiSynthesisMethodTagTreeNodesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public destroyApiSynthesisMethodTagsId(id: string, options?: any) {
        return StarrydataApiFp(this.configuration).destroyApiSynthesisMethodTagsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiFabricationProcesses(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiFabricationProcesses(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiSynthesisMethodTagTreeNodes(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiSynthesisMethodTagTreeNodes(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {number} [pageNumber] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public listApiSynthesisMethodTags(include?: string, fields?: string, pageNumber?: number, pageSize?: number, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).listApiSynthesisMethodTags(include, fields, pageNumber, pageSize, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiFabricationProcessesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiFabricationProcessesId(id, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiSynthesisMethodTagTreeNodesId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiSynthesisMethodTagTreeNodesId(id, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public partialUpdateApiSynthesisMethodTagsId(id: string, uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return StarrydataApiFp(this.configuration).partialUpdateApiSynthesisMethodTagsId(id, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this fabrication process.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiFabricationProcessesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiFabricationProcessesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag tree node.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiSynthesisMethodTagTreeNodesId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiSynthesisMethodTagTreeNodesId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A unique integer value identifying this synthesis method tag.
     * @param {string} [include] [list of included related resources](https://jsonapi.org/format/#fetching-includes)
     * @param {string} [fields] sparse fieldsets: &#x60;fields[TYPE]&#x3D;field1,field2,...&#x60;
     * @param {string} [sort] Which field to use when ordering the results.
     * @param {string} [filterSearch] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarrydataApi
     */
    public retrieveApiSynthesisMethodTagsId(id: string, include?: string, fields?: string, sort?: string, filterSearch?: string, options?: any) {
        return StarrydataApiFp(this.configuration).retrieveApiSynthesisMethodTagsId(id, include, fields, sort, filterSearch, options).then((request) => request(this.axios, this.basePath));
    }
}


